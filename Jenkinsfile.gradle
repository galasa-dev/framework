pipeline {

   agent {
      label 'codesigning'
   }

   environment {
      // Configure Gradle from the tools definition in Jenkins
      def gradleHome = tool 'gradle'
      PATH = "${gradleHome}/bin:${env.PATH}"
      
      //Set some defaults
      def workspace = pwd()
   }

   stages {
      stage('prep-workspace') { 
         steps {
            configFileProvider([configFile(fileId: '86dde059-684b-4300-b595-64e83c2dd217', targetLocation: 'settings.xml')]) {
            }
            configFileProvider([configFile(fileId: 'galasa-init-gradle', targetLocation: '.gradle/init.gradle')]) {
            }
            dir('repository/dev.galasa') {
               deleteDir()
            }
            dir('repository/dev/galasa') {
               deleteDir()
            }
         }
      }

      stage('prep-npm') {
         environment {
            CREDS = credentials('galasa-nexus')
         }
         steps {
            sh "npm set _auth \$(echo -n '$CREDS_USR:$CREDS_PSW' | openssl base64)"
         }
      }

      stage('maven') {
         // Unavoidable until all other projects are no longer dependent on using galasa-parent pom.xml as a parent.
         steps {
            withCredentials([string(credentialsId: 'galasa-gpg', variable: 'GPG')]) {
               withFolderProperties { withSonarQubeEnv('GalasaSonarQube') {
                  dir('galasa-parent') {
                     sh "mvn --settings ${workspace}/settings.xml -Dmaven.repo.local=${workspace}/repository -Dgpg.skip=${GPG_SKIP} -Dgpg.passphrase=$GPG -P ${MAVEN_PROFILE} -B -e -fae --non-recursive ${MAVEN_GOAL}"
                  }
               }
               }
            }
         }
      }

      stage('gradle') {
         steps {
            withCredentials([
               string(credentialsId: 'galasa-gpg', variable: 'GPG'),
               usernamePassword(credentialsId: 'galasa-nexus', usernameVariable: 'MAVENUSERNAME', passwordVariable: 'MAVENPASSWORD'),
               usernamePassword(credentialsId: 'gradle-cache', usernameVariable: 'CACHEUSERNAME', passwordVariable: 'CACHEPASSWORD')
            ]) {
               withFolderProperties { 
                  dir('galasa-parent') {
                     sh "gradle -s -Dgradle.user.home=${workspace}/.gradle -Psigning.gnupg.keyName=8534E695 -Psigning.gnupg.passphrase=$GPG ${GRADLE_CACHE} ${GRADLE_TASKS}"
                  }
                  dir('galasa-parent/dev.galasa.framework.obr') {
                     // sh "gradle -s -Dgradle.user.home=${workspace}/.gradle -Psigning.gnupg.keyName=8534E695 -Psigning.gnupg.passphrase=$GPG ${GRADLE_CACHE} genobr ${GRADLE_TASKS} --rerun-tasks --refresh-dependencies"
                     sh "mvn --settings ${workspace}/settings.xml -Dmaven.repo.local=${workspace}/repository -Dgpg.skip=${GPG_SKIP} -Dgpg.passphrase=$GPG -P ${MAVEN_PROFILE} -B -e -fae --non-recursive ${MAVEN_GOAL}"
                  }
               }
            }
         }
      }
      stage('npm') {
         steps {
            withFolderProperties {
               dir('galasa-parent') {
                  // dev.galasa.framework.api.ras
                  sh "gradle -s -Dgradle.user.home=${workspace}/.gradle ${GRADLE_CACHE} :dev.galasa.framework.api.ras:openApiGenerate"
                  
                  dir('dev.galasa.framework.api.ras/build/openapi') {
                     sh "npm --ignore-scripts install"
                     sh "npm --ignore-scripts update"
                     sh "npm run-script build"
                     script {
                        sh "cp package.json dist/"
                        sh "cp README.md dist/" 
                        dir('dist') {
                           if (env.PULL_REQ == 'true') {
                              echo 'Skipping npm publish'
                              sh "npm --ignore-scripts publish --dry-run"
                           } else {
                              sh "npm --ignore-scripts publish"
                           }
                        }
                     }                      
                  }

                  // dev.galasa.framework.api.cps
                  sh "gradle -s -Dgradle.user.home=${workspace}/.gradle ${GRADLE_CACHE} :dev.galasa.framework.api.cps:openApiGenerate"
                  
                  dir('dev.galasa.framework.api.cps/build/openapi') {
                     sh "npm --ignore-scripts install"
                     sh "npm --ignore-scripts update"
                     sh "npm run-script build"
                     script {
                        sh "cp package.json dist/"
                        sh "cp README.md dist/" 
                        dir('dist') {
                           if (env.PULL_REQ == 'true') {
                              echo 'Skipping npm publish'
                              sh "npm --ignore-scripts publish --dry-run"
                           } else {
                              sh "npm --ignore-scripts publish"
                           }
                        }
                     }                      
                  }

                  // dev.galasa.framework.api.runs
                  sh "gradle -s -Dgradle.user.home=${workspace}/.gradle ${GRADLE_CACHE} :dev.galasa.framework.api.runs:openApiGenerate"
                  
                  dir('dev.galasa.framework.api.runs/build/openapi') {
                     sh "npm --ignore-scripts install"
                     sh "npm --ignore-scripts update"
                     sh "npm run-script build"
                     script {
                        sh "cp package.json dist/"
                        sh "cp README.md dist/" 
                        dir('dist') {
                           if (env.PULL_REQ == 'true') {
                              echo 'Skipping npm publish'
                              sh "npm --ignore-scripts publish --dry-run"
                           } else {
                              sh "npm --ignore-scripts publish"
                           }
                        }
                     }                      
                  }
               }
            }
         }
      }
   }
}
