/*
 * Galasa Ecosystem API
 * The Galasa Ecosystem REST API allows you to interact with a Galasa Ecosystem.
 *
 * The version of the OpenAPI document: 0.28.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WorklistItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-23T09:56:25.063401+01:00[Europe/London]")
public class WorklistItem {
  public static final String SERIALIZED_NAME_RUN_ID = "runId";
  @SerializedName(SERIALIZED_NAME_RUN_ID)
  private String runId;

  public static final String SERIALIZED_NAME_RUN_NAME = "runName";
  @SerializedName(SERIALIZED_NAME_RUN_NAME)
  private String runName;

  public static final String SERIALIZED_NAME_SHORT_NAME = "shortName";
  @SerializedName(SERIALIZED_NAME_SHORT_NAME)
  private String shortName;

  public static final String SERIALIZED_NAME_TEST_CLASS = "testClass";
  @SerializedName(SERIALIZED_NAME_TEST_CLASS)
  private String testClass;

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private String result;

  public WorklistItem() {
  }

  public WorklistItem runId(String runId) {
    
    this.runId = runId;
    return this;
  }

   /**
   * Get runId
   * @return runId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRunId() {
    return runId;
  }


  public void setRunId(String runId) {
    this.runId = runId;
  }


  public WorklistItem runName(String runName) {
    
    this.runName = runName;
    return this;
  }

   /**
   * Get runName
   * @return runName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRunName() {
    return runName;
  }


  public void setRunName(String runName) {
    this.runName = runName;
  }


  public WorklistItem shortName(String shortName) {
    
    this.shortName = shortName;
    return this;
  }

   /**
   * Get shortName
   * @return shortName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getShortName() {
    return shortName;
  }


  public void setShortName(String shortName) {
    this.shortName = shortName;
  }


  public WorklistItem testClass(String testClass) {
    
    this.testClass = testClass;
    return this;
  }

   /**
   * Get testClass
   * @return testClass
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTestClass() {
    return testClass;
  }


  public void setTestClass(String testClass) {
    this.testClass = testClass;
  }


  public WorklistItem result(String result) {
    
    this.result = result;
    return this;
  }

   /**
   * Get result
   * @return result
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getResult() {
    return result;
  }


  public void setResult(String result) {
    this.result = result;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorklistItem worklistItem = (WorklistItem) o;
    return Objects.equals(this.runId, worklistItem.runId) &&
        Objects.equals(this.runName, worklistItem.runName) &&
        Objects.equals(this.shortName, worklistItem.shortName) &&
        Objects.equals(this.testClass, worklistItem.testClass) &&
        Objects.equals(this.result, worklistItem.result);
  }

  @Override
  public int hashCode() {
    return Objects.hash(runId, runName, shortName, testClass, result);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorklistItem {\n");
    sb.append("    runId: ").append(toIndentedString(runId)).append("\n");
    sb.append("    runName: ").append(toIndentedString(runName)).append("\n");
    sb.append("    shortName: ").append(toIndentedString(shortName)).append("\n");
    sb.append("    testClass: ").append(toIndentedString(testClass)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("runId");
    openapiFields.add("runName");
    openapiFields.add("shortName");
    openapiFields.add("testClass");
    openapiFields.add("result");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to WorklistItem
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (WorklistItem.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorklistItem is not found in the empty JSON string", WorklistItem.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!WorklistItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorklistItem` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("runId") != null && !jsonObj.get("runId").isJsonNull()) && !jsonObj.get("runId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runId").toString()));
      }
      if ((jsonObj.get("runName") != null && !jsonObj.get("runName").isJsonNull()) && !jsonObj.get("runName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runName").toString()));
      }
      if ((jsonObj.get("shortName") != null && !jsonObj.get("shortName").isJsonNull()) && !jsonObj.get("shortName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shortName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shortName").toString()));
      }
      if ((jsonObj.get("testClass") != null && !jsonObj.get("testClass").isJsonNull()) && !jsonObj.get("testClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `testClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("testClass").toString()));
      }
      if ((jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) && !jsonObj.get("result").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `result` to be a primitive type in the JSON string but got `%s`", jsonObj.get("result").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorklistItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorklistItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorklistItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorklistItem.class));

       return (TypeAdapter<T>) new TypeAdapter<WorklistItem>() {
           @Override
           public void write(JsonWriter out, WorklistItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorklistItem read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WorklistItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WorklistItem
  * @throws IOException if the JSON string is invalid with respect to WorklistItem
  */
  public static WorklistItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorklistItem.class);
  }

 /**
  * Convert an instance of WorklistItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

