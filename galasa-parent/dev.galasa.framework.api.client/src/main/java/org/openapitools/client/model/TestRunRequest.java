/*
 * Galasa Ecosystem API
 * The Galasa Ecosystem REST API allows you to interact with a Galasa Ecosystem.
 *
 * The version of the OpenAPI document: 0.28.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TestRunRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-23T09:56:25.063401+01:00[Europe/London]")
public class TestRunRequest {
  public static final String SERIALIZED_NAME_CLASS_NAMES = "classNames";
  @SerializedName(SERIALIZED_NAME_CLASS_NAMES)
  private List<String> classNames = null;

  public static final String SERIALIZED_NAME_REQUESTOR_TYPE = "requestorType";
  @SerializedName(SERIALIZED_NAME_REQUESTOR_TYPE)
  private String requestorType;

  public static final String SERIALIZED_NAME_REQUESTOR = "requestor";
  @SerializedName(SERIALIZED_NAME_REQUESTOR)
  private String requestor;

  public static final String SERIALIZED_NAME_TEST_STREAM = "testStream";
  @SerializedName(SERIALIZED_NAME_TEST_STREAM)
  private String testStream;

  public static final String SERIALIZED_NAME_OBR = "obr";
  @SerializedName(SERIALIZED_NAME_OBR)
  private String obr;

  public static final String SERIALIZED_NAME_MAVEN_REPOSITORY = "mavenRepository";
  @SerializedName(SERIALIZED_NAME_MAVEN_REPOSITORY)
  private String mavenRepository;

  public static final String SERIALIZED_NAME_SHARED_ENVIRONMENT_PHASE = "sharedEnvironmentPhase";
  @SerializedName(SERIALIZED_NAME_SHARED_ENVIRONMENT_PHASE)
  private String sharedEnvironmentPhase;

  public static final String SERIALIZED_NAME_SHARED_ENVIRONMENT_RUN_NAME = "sharedEnvironmentRunName";
  @SerializedName(SERIALIZED_NAME_SHARED_ENVIRONMENT_RUN_NAME)
  private String sharedEnvironmentRunName;

  public static final String SERIALIZED_NAME_OVERRIDES = "overrides";
  @SerializedName(SERIALIZED_NAME_OVERRIDES)
  private Object overrides;

  public static final String SERIALIZED_NAME_TRACE = "trace";
  @SerializedName(SERIALIZED_NAME_TRACE)
  private Boolean trace;

  public TestRunRequest() {
  }

  public TestRunRequest classNames(List<String> classNames) {
    
    this.classNames = classNames;
    return this;
  }

  public TestRunRequest addClassNamesItem(String classNamesItem) {
    if (this.classNames == null) {
      this.classNames = new ArrayList<>();
    }
    this.classNames.add(classNamesItem);
    return this;
  }

   /**
   * Get classNames
   * @return classNames
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getClassNames() {
    return classNames;
  }


  public void setClassNames(List<String> classNames) {
    this.classNames = classNames;
  }


  public TestRunRequest requestorType(String requestorType) {
    
    this.requestorType = requestorType;
    return this;
  }

   /**
   * Get requestorType
   * @return requestorType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRequestorType() {
    return requestorType;
  }


  public void setRequestorType(String requestorType) {
    this.requestorType = requestorType;
  }


  public TestRunRequest requestor(String requestor) {
    
    this.requestor = requestor;
    return this;
  }

   /**
   * Get requestor
   * @return requestor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRequestor() {
    return requestor;
  }


  public void setRequestor(String requestor) {
    this.requestor = requestor;
  }


  public TestRunRequest testStream(String testStream) {
    
    this.testStream = testStream;
    return this;
  }

   /**
   * Get testStream
   * @return testStream
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTestStream() {
    return testStream;
  }


  public void setTestStream(String testStream) {
    this.testStream = testStream;
  }


  public TestRunRequest obr(String obr) {
    
    this.obr = obr;
    return this;
  }

   /**
   * Get obr
   * @return obr
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getObr() {
    return obr;
  }


  public void setObr(String obr) {
    this.obr = obr;
  }


  public TestRunRequest mavenRepository(String mavenRepository) {
    
    this.mavenRepository = mavenRepository;
    return this;
  }

   /**
   * Get mavenRepository
   * @return mavenRepository
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMavenRepository() {
    return mavenRepository;
  }


  public void setMavenRepository(String mavenRepository) {
    this.mavenRepository = mavenRepository;
  }


  public TestRunRequest sharedEnvironmentPhase(String sharedEnvironmentPhase) {
    
    this.sharedEnvironmentPhase = sharedEnvironmentPhase;
    return this;
  }

   /**
   * Get sharedEnvironmentPhase
   * @return sharedEnvironmentPhase
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSharedEnvironmentPhase() {
    return sharedEnvironmentPhase;
  }


  public void setSharedEnvironmentPhase(String sharedEnvironmentPhase) {
    this.sharedEnvironmentPhase = sharedEnvironmentPhase;
  }


  public TestRunRequest sharedEnvironmentRunName(String sharedEnvironmentRunName) {
    
    this.sharedEnvironmentRunName = sharedEnvironmentRunName;
    return this;
  }

   /**
   * Get sharedEnvironmentRunName
   * @return sharedEnvironmentRunName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSharedEnvironmentRunName() {
    return sharedEnvironmentRunName;
  }


  public void setSharedEnvironmentRunName(String sharedEnvironmentRunName) {
    this.sharedEnvironmentRunName = sharedEnvironmentRunName;
  }


  public TestRunRequest overrides(Object overrides) {
    
    this.overrides = overrides;
    return this;
  }

   /**
   * Get overrides
   * @return overrides
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getOverrides() {
    return overrides;
  }


  public void setOverrides(Object overrides) {
    this.overrides = overrides;
  }


  public TestRunRequest trace(Boolean trace) {
    
    this.trace = trace;
    return this;
  }

   /**
   * Get trace
   * @return trace
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getTrace() {
    return trace;
  }


  public void setTrace(Boolean trace) {
    this.trace = trace;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestRunRequest testRunRequest = (TestRunRequest) o;
    return Objects.equals(this.classNames, testRunRequest.classNames) &&
        Objects.equals(this.requestorType, testRunRequest.requestorType) &&
        Objects.equals(this.requestor, testRunRequest.requestor) &&
        Objects.equals(this.testStream, testRunRequest.testStream) &&
        Objects.equals(this.obr, testRunRequest.obr) &&
        Objects.equals(this.mavenRepository, testRunRequest.mavenRepository) &&
        Objects.equals(this.sharedEnvironmentPhase, testRunRequest.sharedEnvironmentPhase) &&
        Objects.equals(this.sharedEnvironmentRunName, testRunRequest.sharedEnvironmentRunName) &&
        Objects.equals(this.overrides, testRunRequest.overrides) &&
        Objects.equals(this.trace, testRunRequest.trace);
  }

  @Override
  public int hashCode() {
    return Objects.hash(classNames, requestorType, requestor, testStream, obr, mavenRepository, sharedEnvironmentPhase, sharedEnvironmentRunName, overrides, trace);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestRunRequest {\n");
    sb.append("    classNames: ").append(toIndentedString(classNames)).append("\n");
    sb.append("    requestorType: ").append(toIndentedString(requestorType)).append("\n");
    sb.append("    requestor: ").append(toIndentedString(requestor)).append("\n");
    sb.append("    testStream: ").append(toIndentedString(testStream)).append("\n");
    sb.append("    obr: ").append(toIndentedString(obr)).append("\n");
    sb.append("    mavenRepository: ").append(toIndentedString(mavenRepository)).append("\n");
    sb.append("    sharedEnvironmentPhase: ").append(toIndentedString(sharedEnvironmentPhase)).append("\n");
    sb.append("    sharedEnvironmentRunName: ").append(toIndentedString(sharedEnvironmentRunName)).append("\n");
    sb.append("    overrides: ").append(toIndentedString(overrides)).append("\n");
    sb.append("    trace: ").append(toIndentedString(trace)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("classNames");
    openapiFields.add("requestorType");
    openapiFields.add("requestor");
    openapiFields.add("testStream");
    openapiFields.add("obr");
    openapiFields.add("mavenRepository");
    openapiFields.add("sharedEnvironmentPhase");
    openapiFields.add("sharedEnvironmentRunName");
    openapiFields.add("overrides");
    openapiFields.add("trace");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TestRunRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (TestRunRequest.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestRunRequest is not found in the empty JSON string", TestRunRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TestRunRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestRunRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if ((jsonObj.get("classNames") != null && !jsonObj.get("classNames").isJsonNull()) && !jsonObj.get("classNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `classNames` to be an array in the JSON string but got `%s`", jsonObj.get("classNames").toString()));
      }
      if ((jsonObj.get("requestorType") != null && !jsonObj.get("requestorType").isJsonNull()) && !jsonObj.get("requestorType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestorType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestorType").toString()));
      }
      if ((jsonObj.get("requestor") != null && !jsonObj.get("requestor").isJsonNull()) && !jsonObj.get("requestor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestor").toString()));
      }
      if ((jsonObj.get("testStream") != null && !jsonObj.get("testStream").isJsonNull()) && !jsonObj.get("testStream").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `testStream` to be a primitive type in the JSON string but got `%s`", jsonObj.get("testStream").toString()));
      }
      if ((jsonObj.get("obr") != null && !jsonObj.get("obr").isJsonNull()) && !jsonObj.get("obr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `obr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("obr").toString()));
      }
      if ((jsonObj.get("mavenRepository") != null && !jsonObj.get("mavenRepository").isJsonNull()) && !jsonObj.get("mavenRepository").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mavenRepository` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mavenRepository").toString()));
      }
      if ((jsonObj.get("sharedEnvironmentPhase") != null && !jsonObj.get("sharedEnvironmentPhase").isJsonNull()) && !jsonObj.get("sharedEnvironmentPhase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sharedEnvironmentPhase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sharedEnvironmentPhase").toString()));
      }
      if ((jsonObj.get("sharedEnvironmentRunName") != null && !jsonObj.get("sharedEnvironmentRunName").isJsonNull()) && !jsonObj.get("sharedEnvironmentRunName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sharedEnvironmentRunName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sharedEnvironmentRunName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestRunRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestRunRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestRunRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestRunRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TestRunRequest>() {
           @Override
           public void write(JsonWriter out, TestRunRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestRunRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TestRunRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TestRunRequest
  * @throws IOException if the JSON string is invalid with respect to TestRunRequest
  */
  public static TestRunRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestRunRequest.class);
  }

 /**
  * Convert an instance of TestRunRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

