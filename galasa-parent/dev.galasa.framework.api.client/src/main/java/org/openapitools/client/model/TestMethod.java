/*
 * Galasa Ecosystem API
 * The Galasa Ecosystem REST API allows you to interact with a Galasa Ecosystem.
 *
 * The version of the OpenAPI document: 0.28.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TestMethod
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-23T09:56:25.063401+01:00[Europe/London]")
public class TestMethod {
  public static final String SERIALIZED_NAME_CLASS_NAME = "className";
  @SerializedName(SERIALIZED_NAME_CLASS_NAME)
  private String className;

  public static final String SERIALIZED_NAME_METHOD_NAME = "methodName";
  @SerializedName(SERIALIZED_NAME_METHOD_NAME)
  private String methodName;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private String result;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  public static final String SERIALIZED_NAME_RUN_LOG_START = "runLogStart";
  @SerializedName(SERIALIZED_NAME_RUN_LOG_START)
  private Integer runLogStart;

  public static final String SERIALIZED_NAME_RUN_LOG_END = "runLogEnd";
  @SerializedName(SERIALIZED_NAME_RUN_LOG_END)
  private Integer runLogEnd;

  public static final String SERIALIZED_NAME_BEFORES = "befores";
  @SerializedName(SERIALIZED_NAME_BEFORES)
  private List<Object> befores = null;

  public static final String SERIALIZED_NAME_AFTERS = "afters";
  @SerializedName(SERIALIZED_NAME_AFTERS)
  private List<Object> afters = null;

  public TestMethod() {
  }

  public TestMethod className(String className) {
    
    this.className = className;
    return this;
  }

   /**
   * Get className
   * @return className
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getClassName() {
    return className;
  }


  public void setClassName(String className) {
    this.className = className;
  }


  public TestMethod methodName(String methodName) {
    
    this.methodName = methodName;
    return this;
  }

   /**
   * Get methodName
   * @return methodName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMethodName() {
    return methodName;
  }


  public void setMethodName(String methodName) {
    this.methodName = methodName;
  }


  public TestMethod type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public TestMethod status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public TestMethod result(String result) {
    
    this.result = result;
    return this;
  }

   /**
   * Get result
   * @return result
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getResult() {
    return result;
  }


  public void setResult(String result) {
    this.result = result;
  }


  public TestMethod startTime(String startTime) {
    
    this.startTime = startTime;
    return this;
  }

   /**
   * Get startTime
   * @return startTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStartTime() {
    return startTime;
  }


  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }


  public TestMethod endTime(String endTime) {
    
    this.endTime = endTime;
    return this;
  }

   /**
   * Get endTime
   * @return endTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEndTime() {
    return endTime;
  }


  public void setEndTime(String endTime) {
    this.endTime = endTime;
  }


  public TestMethod runLogStart(Integer runLogStart) {
    
    this.runLogStart = runLogStart;
    return this;
  }

   /**
   * Get runLogStart
   * @return runLogStart
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getRunLogStart() {
    return runLogStart;
  }


  public void setRunLogStart(Integer runLogStart) {
    this.runLogStart = runLogStart;
  }


  public TestMethod runLogEnd(Integer runLogEnd) {
    
    this.runLogEnd = runLogEnd;
    return this;
  }

   /**
   * Get runLogEnd
   * @return runLogEnd
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getRunLogEnd() {
    return runLogEnd;
  }


  public void setRunLogEnd(Integer runLogEnd) {
    this.runLogEnd = runLogEnd;
  }


  public TestMethod befores(List<Object> befores) {
    
    this.befores = befores;
    return this;
  }

  public TestMethod addBeforesItem(Object beforesItem) {
    if (this.befores == null) {
      this.befores = new ArrayList<>();
    }
    this.befores.add(beforesItem);
    return this;
  }

   /**
   * Get befores
   * @return befores
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Object> getBefores() {
    return befores;
  }


  public void setBefores(List<Object> befores) {
    this.befores = befores;
  }


  public TestMethod afters(List<Object> afters) {
    
    this.afters = afters;
    return this;
  }

  public TestMethod addAftersItem(Object aftersItem) {
    if (this.afters == null) {
      this.afters = new ArrayList<>();
    }
    this.afters.add(aftersItem);
    return this;
  }

   /**
   * Get afters
   * @return afters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Object> getAfters() {
    return afters;
  }


  public void setAfters(List<Object> afters) {
    this.afters = afters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestMethod testMethod = (TestMethod) o;
    return Objects.equals(this.className, testMethod.className) &&
        Objects.equals(this.methodName, testMethod.methodName) &&
        Objects.equals(this.type, testMethod.type) &&
        Objects.equals(this.status, testMethod.status) &&
        Objects.equals(this.result, testMethod.result) &&
        Objects.equals(this.startTime, testMethod.startTime) &&
        Objects.equals(this.endTime, testMethod.endTime) &&
        Objects.equals(this.runLogStart, testMethod.runLogStart) &&
        Objects.equals(this.runLogEnd, testMethod.runLogEnd) &&
        Objects.equals(this.befores, testMethod.befores) &&
        Objects.equals(this.afters, testMethod.afters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(className, methodName, type, status, result, startTime, endTime, runLogStart, runLogEnd, befores, afters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestMethod {\n");
    sb.append("    className: ").append(toIndentedString(className)).append("\n");
    sb.append("    methodName: ").append(toIndentedString(methodName)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    runLogStart: ").append(toIndentedString(runLogStart)).append("\n");
    sb.append("    runLogEnd: ").append(toIndentedString(runLogEnd)).append("\n");
    sb.append("    befores: ").append(toIndentedString(befores)).append("\n");
    sb.append("    afters: ").append(toIndentedString(afters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("className");
    openapiFields.add("methodName");
    openapiFields.add("type");
    openapiFields.add("status");
    openapiFields.add("result");
    openapiFields.add("startTime");
    openapiFields.add("endTime");
    openapiFields.add("runLogStart");
    openapiFields.add("runLogEnd");
    openapiFields.add("befores");
    openapiFields.add("afters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TestMethod
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (TestMethod.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestMethod is not found in the empty JSON string", TestMethod.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TestMethod.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestMethod` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("className") != null && !jsonObj.get("className").isJsonNull()) && !jsonObj.get("className").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `className` to be a primitive type in the JSON string but got `%s`", jsonObj.get("className").toString()));
      }
      if ((jsonObj.get("methodName") != null && !jsonObj.get("methodName").isJsonNull()) && !jsonObj.get("methodName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `methodName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("methodName").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) && !jsonObj.get("result").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `result` to be a primitive type in the JSON string but got `%s`", jsonObj.get("result").toString()));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
      if ((jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) && !jsonObj.get("endTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTime").toString()));
      }
      // ensure the json data is an array
      if ((jsonObj.get("befores") != null && !jsonObj.get("befores").isJsonNull()) && !jsonObj.get("befores").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `befores` to be an array in the JSON string but got `%s`", jsonObj.get("befores").toString()));
      }
      // ensure the json data is an array
      if ((jsonObj.get("afters") != null && !jsonObj.get("afters").isJsonNull()) && !jsonObj.get("afters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `afters` to be an array in the JSON string but got `%s`", jsonObj.get("afters").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestMethod.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestMethod' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestMethod> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestMethod.class));

       return (TypeAdapter<T>) new TypeAdapter<TestMethod>() {
           @Override
           public void write(JsonWriter out, TestMethod value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestMethod read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TestMethod given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TestMethod
  * @throws IOException if the JSON string is invalid with respect to TestMethod
  */
  public static TestMethod fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestMethod.class);
  }

 /**
  * Convert an instance of TestMethod to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

