/*
 * Galasa Ecosystem API
 * The Galasa Ecosystem REST API allows you to interact with a Galasa Ecosystem.
 *
 * The version of the OpenAPI document: 0.28.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TestRun
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-23T09:56:25.063401+01:00[Europe/London]")
public class TestRun {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private String group;

  public static final String SERIALIZED_NAME_TEST = "test";
  @SerializedName(SERIALIZED_NAME_TEST)
  private String test;

  public static final String SERIALIZED_NAME_BUNDLE_NAME = "bundleName";
  @SerializedName(SERIALIZED_NAME_BUNDLE_NAME)
  private String bundleName;

  public static final String SERIALIZED_NAME_TEST_NAME = "testName";
  @SerializedName(SERIALIZED_NAME_TEST_NAME)
  private String testName;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private String result;

  public static final String SERIALIZED_NAME_QUEUED = "queued";
  @SerializedName(SERIALIZED_NAME_QUEUED)
  private String queued;

  public static final String SERIALIZED_NAME_REQUESTOR = "requestor";
  @SerializedName(SERIALIZED_NAME_REQUESTOR)
  private String requestor;

  public static final String SERIALIZED_NAME_STREAM = "stream";
  @SerializedName(SERIALIZED_NAME_STREAM)
  private String stream;

  public static final String SERIALIZED_NAME_REPO = "repo";
  @SerializedName(SERIALIZED_NAME_REPO)
  private String repo;

  public static final String SERIALIZED_NAME_OBR = "obr";
  @SerializedName(SERIALIZED_NAME_OBR)
  private String obr;

  public static final String SERIALIZED_NAME_RERUN = "rerun";
  @SerializedName(SERIALIZED_NAME_RERUN)
  private Boolean rerun;

  public static final String SERIALIZED_NAME_RERUN_REASON = "rerunReason";
  @SerializedName(SERIALIZED_NAME_RERUN_REASON)
  private String rerunReason;

  public static final String SERIALIZED_NAME_LOCAL = "local";
  @SerializedName(SERIALIZED_NAME_LOCAL)
  private Boolean local;

  public static final String SERIALIZED_NAME_TRACE = "trace";
  @SerializedName(SERIALIZED_NAME_TRACE)
  private Boolean trace;

  public static final String SERIALIZED_NAME_RAS_RUN_ID = "rasRunId";
  @SerializedName(SERIALIZED_NAME_RAS_RUN_ID)
  private String rasRunId;

  public TestRun() {
  }

  public TestRun name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public TestRun type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public TestRun group(String group) {
    
    this.group = group;
    return this;
  }

   /**
   * Get group
   * @return group
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getGroup() {
    return group;
  }


  public void setGroup(String group) {
    this.group = group;
  }


  public TestRun test(String test) {
    
    this.test = test;
    return this;
  }

   /**
   * Get test
   * @return test
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTest() {
    return test;
  }


  public void setTest(String test) {
    this.test = test;
  }


  public TestRun bundleName(String bundleName) {
    
    this.bundleName = bundleName;
    return this;
  }

   /**
   * Get bundleName
   * @return bundleName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBundleName() {
    return bundleName;
  }


  public void setBundleName(String bundleName) {
    this.bundleName = bundleName;
  }


  public TestRun testName(String testName) {
    
    this.testName = testName;
    return this;
  }

   /**
   * Get testName
   * @return testName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTestName() {
    return testName;
  }


  public void setTestName(String testName) {
    this.testName = testName;
  }


  public TestRun status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public TestRun result(String result) {
    
    this.result = result;
    return this;
  }

   /**
   * Get result
   * @return result
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getResult() {
    return result;
  }


  public void setResult(String result) {
    this.result = result;
  }


  public TestRun queued(String queued) {
    
    this.queued = queued;
    return this;
  }

   /**
   * Get queued
   * @return queued
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getQueued() {
    return queued;
  }


  public void setQueued(String queued) {
    this.queued = queued;
  }


  public TestRun requestor(String requestor) {
    
    this.requestor = requestor;
    return this;
  }

   /**
   * Get requestor
   * @return requestor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRequestor() {
    return requestor;
  }


  public void setRequestor(String requestor) {
    this.requestor = requestor;
  }


  public TestRun stream(String stream) {
    
    this.stream = stream;
    return this;
  }

   /**
   * Get stream
   * @return stream
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStream() {
    return stream;
  }


  public void setStream(String stream) {
    this.stream = stream;
  }


  public TestRun repo(String repo) {
    
    this.repo = repo;
    return this;
  }

   /**
   * Get repo
   * @return repo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRepo() {
    return repo;
  }


  public void setRepo(String repo) {
    this.repo = repo;
  }


  public TestRun obr(String obr) {
    
    this.obr = obr;
    return this;
  }

   /**
   * Get obr
   * @return obr
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getObr() {
    return obr;
  }


  public void setObr(String obr) {
    this.obr = obr;
  }


  public TestRun rerun(Boolean rerun) {
    
    this.rerun = rerun;
    return this;
  }

   /**
   * Get rerun
   * @return rerun
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getRerun() {
    return rerun;
  }


  public void setRerun(Boolean rerun) {
    this.rerun = rerun;
  }


  public TestRun rerunReason(String rerunReason) {
    
    this.rerunReason = rerunReason;
    return this;
  }

   /**
   * Get rerunReason
   * @return rerunReason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRerunReason() {
    return rerunReason;
  }


  public void setRerunReason(String rerunReason) {
    this.rerunReason = rerunReason;
  }


  public TestRun local(Boolean local) {
    
    this.local = local;
    return this;
  }

   /**
   * Get local
   * @return local
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getLocal() {
    return local;
  }


  public void setLocal(Boolean local) {
    this.local = local;
  }


  public TestRun trace(Boolean trace) {
    
    this.trace = trace;
    return this;
  }

   /**
   * Get trace
   * @return trace
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getTrace() {
    return trace;
  }


  public void setTrace(Boolean trace) {
    this.trace = trace;
  }


  public TestRun rasRunId(String rasRunId) {
    
    this.rasRunId = rasRunId;
    return this;
  }

   /**
   * Get rasRunId
   * @return rasRunId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRasRunId() {
    return rasRunId;
  }


  public void setRasRunId(String rasRunId) {
    this.rasRunId = rasRunId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestRun testRun = (TestRun) o;
    return Objects.equals(this.name, testRun.name) &&
        Objects.equals(this.type, testRun.type) &&
        Objects.equals(this.group, testRun.group) &&
        Objects.equals(this.test, testRun.test) &&
        Objects.equals(this.bundleName, testRun.bundleName) &&
        Objects.equals(this.testName, testRun.testName) &&
        Objects.equals(this.status, testRun.status) &&
        Objects.equals(this.result, testRun.result) &&
        Objects.equals(this.queued, testRun.queued) &&
        Objects.equals(this.requestor, testRun.requestor) &&
        Objects.equals(this.stream, testRun.stream) &&
        Objects.equals(this.repo, testRun.repo) &&
        Objects.equals(this.obr, testRun.obr) &&
        Objects.equals(this.rerun, testRun.rerun) &&
        Objects.equals(this.rerunReason, testRun.rerunReason) &&
        Objects.equals(this.local, testRun.local) &&
        Objects.equals(this.trace, testRun.trace) &&
        Objects.equals(this.rasRunId, testRun.rasRunId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, type, group, test, bundleName, testName, status, result, queued, requestor, stream, repo, obr, rerun, rerunReason, local, trace, rasRunId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestRun {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    test: ").append(toIndentedString(test)).append("\n");
    sb.append("    bundleName: ").append(toIndentedString(bundleName)).append("\n");
    sb.append("    testName: ").append(toIndentedString(testName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    queued: ").append(toIndentedString(queued)).append("\n");
    sb.append("    requestor: ").append(toIndentedString(requestor)).append("\n");
    sb.append("    stream: ").append(toIndentedString(stream)).append("\n");
    sb.append("    repo: ").append(toIndentedString(repo)).append("\n");
    sb.append("    obr: ").append(toIndentedString(obr)).append("\n");
    sb.append("    rerun: ").append(toIndentedString(rerun)).append("\n");
    sb.append("    rerunReason: ").append(toIndentedString(rerunReason)).append("\n");
    sb.append("    local: ").append(toIndentedString(local)).append("\n");
    sb.append("    trace: ").append(toIndentedString(trace)).append("\n");
    sb.append("    rasRunId: ").append(toIndentedString(rasRunId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("type");
    openapiFields.add("group");
    openapiFields.add("test");
    openapiFields.add("bundleName");
    openapiFields.add("testName");
    openapiFields.add("status");
    openapiFields.add("result");
    openapiFields.add("queued");
    openapiFields.add("requestor");
    openapiFields.add("stream");
    openapiFields.add("repo");
    openapiFields.add("obr");
    openapiFields.add("rerun");
    openapiFields.add("rerunReason");
    openapiFields.add("local");
    openapiFields.add("trace");
    openapiFields.add("rasRunId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TestRun
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (TestRun.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestRun is not found in the empty JSON string", TestRun.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TestRun.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestRun` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("group") != null && !jsonObj.get("group").isJsonNull()) && !jsonObj.get("group").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group").toString()));
      }
      if ((jsonObj.get("test") != null && !jsonObj.get("test").isJsonNull()) && !jsonObj.get("test").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `test` to be a primitive type in the JSON string but got `%s`", jsonObj.get("test").toString()));
      }
      if ((jsonObj.get("bundleName") != null && !jsonObj.get("bundleName").isJsonNull()) && !jsonObj.get("bundleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bundleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bundleName").toString()));
      }
      if ((jsonObj.get("testName") != null && !jsonObj.get("testName").isJsonNull()) && !jsonObj.get("testName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `testName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("testName").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) && !jsonObj.get("result").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `result` to be a primitive type in the JSON string but got `%s`", jsonObj.get("result").toString()));
      }
      if ((jsonObj.get("queued") != null && !jsonObj.get("queued").isJsonNull()) && !jsonObj.get("queued").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `queued` to be a primitive type in the JSON string but got `%s`", jsonObj.get("queued").toString()));
      }
      if ((jsonObj.get("requestor") != null && !jsonObj.get("requestor").isJsonNull()) && !jsonObj.get("requestor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestor").toString()));
      }
      if ((jsonObj.get("stream") != null && !jsonObj.get("stream").isJsonNull()) && !jsonObj.get("stream").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stream` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stream").toString()));
      }
      if ((jsonObj.get("repo") != null && !jsonObj.get("repo").isJsonNull()) && !jsonObj.get("repo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repo").toString()));
      }
      if ((jsonObj.get("obr") != null && !jsonObj.get("obr").isJsonNull()) && !jsonObj.get("obr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `obr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("obr").toString()));
      }
      if ((jsonObj.get("rerunReason") != null && !jsonObj.get("rerunReason").isJsonNull()) && !jsonObj.get("rerunReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rerunReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rerunReason").toString()));
      }
      if ((jsonObj.get("rasRunId") != null && !jsonObj.get("rasRunId").isJsonNull()) && !jsonObj.get("rasRunId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rasRunId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rasRunId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestRun.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestRun' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestRun> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestRun.class));

       return (TypeAdapter<T>) new TypeAdapter<TestRun>() {
           @Override
           public void write(JsonWriter out, TestRun value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestRun read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TestRun given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TestRun
  * @throws IOException if the JSON string is invalid with respect to TestRun
  */
  public static TestRun fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestRun.class);
  }

 /**
  * Convert an instance of TestRun to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

