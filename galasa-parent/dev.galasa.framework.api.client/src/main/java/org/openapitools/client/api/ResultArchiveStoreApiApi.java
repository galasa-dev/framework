/*
 * Galasa Ecosystem API
 * The Galasa Ecosystem REST API allows you to interact with a Galasa Ecosystem.
 *
 * The version of the OpenAPI document: 0.28.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.APIError;
import org.openapitools.client.model.ArtifactIndexEntry;
import java.io.File;
import org.openapitools.client.model.JsonError;
import java.time.OffsetDateTime;
import org.openapitools.client.model.Requestors;
import org.openapitools.client.model.ResultNames;
import org.openapitools.client.model.Run;
import org.openapitools.client.model.RunResults;
import java.util.Set;
import org.openapitools.client.model.TestClasses;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ResultArchiveStoreApiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ResultArchiveStoreApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ResultArchiveStoreApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getRasRequestors
     * @param sort provides sorting, requestor:asc or requestor:desc (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requestors </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRasRequestorsCall(String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ras/requestors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRasRequestorsValidateBeforeCall(String sort, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getRasRequestorsCall(sort, _callback);
        return localVarCall;

    }

    /**
     * Get all known requestors
     * 
     * @param sort provides sorting, requestor:asc or requestor:desc (optional)
     * @return Requestors
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requestors </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Requestors getRasRequestors(String sort) throws ApiException {
        ApiResponse<Requestors> localVarResp = getRasRequestorsWithHttpInfo(sort);
        return localVarResp.getData();
    }

    /**
     * Get all known requestors
     * 
     * @param sort provides sorting, requestor:asc or requestor:desc (optional)
     * @return ApiResponse&lt;Requestors&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requestors </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Requestors> getRasRequestorsWithHttpInfo(String sort) throws ApiException {
        okhttp3.Call localVarCall = getRasRequestorsValidateBeforeCall(sort, null);
        Type localVarReturnType = new TypeToken<Requestors>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all known requestors (asynchronously)
     * 
     * @param sort provides sorting, requestor:asc or requestor:desc (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requestors </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRasRequestorsAsync(String sort, final ApiCallback<Requestors> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRasRequestorsValidateBeforeCall(sort, _callback);
        Type localVarReturnType = new TypeToken<Requestors>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRasResultNames
     * @param sort provides sorting, results:asc or results:desc (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ResultNames </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRasResultNamesCall(String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ras/resultnames";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRasResultNamesValidateBeforeCall(String sort, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getRasResultNamesCall(sort, _callback);
        return localVarCall;

    }

    /**
     * Get all the known result names
     * 
     * @param sort provides sorting, results:asc or results:desc (optional)
     * @return ResultNames
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ResultNames </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ResultNames getRasResultNames(String sort) throws ApiException {
        ApiResponse<ResultNames> localVarResp = getRasResultNamesWithHttpInfo(sort);
        return localVarResp.getData();
    }

    /**
     * Get all the known result names
     * 
     * @param sort provides sorting, results:asc or results:desc (optional)
     * @return ApiResponse&lt;ResultNames&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ResultNames </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResultNames> getRasResultNamesWithHttpInfo(String sort) throws ApiException {
        okhttp3.Call localVarCall = getRasResultNamesValidateBeforeCall(sort, null);
        Type localVarReturnType = new TypeToken<ResultNames>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the known result names (asynchronously)
     * 
     * @param sort provides sorting, results:asc or results:desc (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ResultNames </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRasResultNamesAsync(String sort, final ApiCallback<ResultNames> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRasResultNamesValidateBeforeCall(sort, _callback);
        Type localVarReturnType = new TypeToken<ResultNames>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRasRunArtifactByPath
     * @param runid Run Id (required)
     * @param artifactPath Run Artifact path (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The artifact is made available to read. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRasRunArtifactByPathCall(String runid, String artifactPath, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ras/runs/{runid}/files/{artifactPath}"
            .replaceAll("\\{" + "runid" + "\\}", localVarApiClient.escapeString(runid.toString()))
            .replaceAll("\\{" + "artifactPath" + "\\}", localVarApiClient.escapeString(artifactPath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRasRunArtifactByPathValidateBeforeCall(String runid, String artifactPath, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'runid' is set
        if (runid == null) {
            throw new ApiException("Missing the required parameter 'runid' when calling getRasRunArtifactByPath(Async)");
        }
        
        // verify the required parameter 'artifactPath' is set
        if (artifactPath == null) {
            throw new ApiException("Missing the required parameter 'artifactPath' when calling getRasRunArtifactByPath(Async)");
        }
        

        okhttp3.Call localVarCall = getRasRunArtifactByPathCall(runid, artifactPath, _callback);
        return localVarCall;

    }

    /**
     * Download Artifact for a given runid by artifactPath
     * 
     * @param runid Run Id (required)
     * @param artifactPath Run Artifact path (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The artifact is made available to read. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server </td><td>  -  </td></tr>
     </table>
     */
    public File getRasRunArtifactByPath(String runid, String artifactPath) throws ApiException {
        ApiResponse<File> localVarResp = getRasRunArtifactByPathWithHttpInfo(runid, artifactPath);
        return localVarResp.getData();
    }

    /**
     * Download Artifact for a given runid by artifactPath
     * 
     * @param runid Run Id (required)
     * @param artifactPath Run Artifact path (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The artifact is made available to read. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getRasRunArtifactByPathWithHttpInfo(String runid, String artifactPath) throws ApiException {
        okhttp3.Call localVarCall = getRasRunArtifactByPathValidateBeforeCall(runid, artifactPath, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download Artifact for a given runid by artifactPath (asynchronously)
     * 
     * @param runid Run Id (required)
     * @param artifactPath Run Artifact path (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The artifact is made available to read. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRasRunArtifactByPathAsync(String runid, String artifactPath, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRasRunArtifactByPathValidateBeforeCall(runid, artifactPath, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRasRunArtifactList
     * @param runid Run Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of artifacts was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRasRunArtifactListCall(String runid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ras/runs/{runid}/artifacts"
            .replaceAll("\\{" + "runid" + "\\}", localVarApiClient.escapeString(runid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRasRunArtifactListValidateBeforeCall(String runid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'runid' is set
        if (runid == null) {
            throw new ApiException("Missing the required parameter 'runid' when calling getRasRunArtifactList(Async)");
        }
        

        okhttp3.Call localVarCall = getRasRunArtifactListCall(runid, _callback);
        return localVarCall;

    }

    /**
     * Get the available Run artifacts which can be downloaded.
     * 
     * @param runid Run Id (required)
     * @return Set&lt;ArtifactIndexEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of artifacts was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Set<ArtifactIndexEntry> getRasRunArtifactList(String runid) throws ApiException {
        ApiResponse<Set<ArtifactIndexEntry>> localVarResp = getRasRunArtifactListWithHttpInfo(runid);
        return localVarResp.getData();
    }

    /**
     * Get the available Run artifacts which can be downloaded.
     * 
     * @param runid Run Id (required)
     * @return ApiResponse&lt;Set&lt;ArtifactIndexEntry&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of artifacts was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Set<ArtifactIndexEntry>> getRasRunArtifactListWithHttpInfo(String runid) throws ApiException {
        okhttp3.Call localVarCall = getRasRunArtifactListValidateBeforeCall(runid, null);
        Type localVarReturnType = new TypeToken<Set<ArtifactIndexEntry>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the available Run artifacts which can be downloaded. (asynchronously)
     * 
     * @param runid Run Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of artifacts was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRasRunArtifactListAsync(String runid, final ApiCallback<Set<ArtifactIndexEntry>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRasRunArtifactListValidateBeforeCall(runid, _callback);
        Type localVarReturnType = new TypeToken<Set<ArtifactIndexEntry>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRasRunById
     * @param runid Run Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Run Data </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRasRunByIdCall(String runid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ras/runs/{runid}"
            .replaceAll("\\{" + "runid" + "\\}", localVarApiClient.escapeString(runid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRasRunByIdValidateBeforeCall(String runid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'runid' is set
        if (runid == null) {
            throw new ApiException("Missing the required parameter 'runid' when calling getRasRunById(Async)");
        }
        

        okhttp3.Call localVarCall = getRasRunByIdCall(runid, _callback);
        return localVarCall;

    }

    /**
     * Get Run by ID
     * 
     * @param runid Run Id (required)
     * @return Run
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Run Data </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Run getRasRunById(String runid) throws ApiException {
        ApiResponse<Run> localVarResp = getRasRunByIdWithHttpInfo(runid);
        return localVarResp.getData();
    }

    /**
     * Get Run by ID
     * 
     * @param runid Run Id (required)
     * @return ApiResponse&lt;Run&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Run Data </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Run> getRasRunByIdWithHttpInfo(String runid) throws ApiException {
        okhttp3.Call localVarCall = getRasRunByIdValidateBeforeCall(runid, null);
        Type localVarReturnType = new TypeToken<Run>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Run by ID (asynchronously)
     * 
     * @param runid Run Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Run Data </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRasRunByIdAsync(String runid, final ApiCallback<Run> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRasRunByIdValidateBeforeCall(runid, _callback);
        Type localVarReturnType = new TypeToken<Run>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRasRunLog
     * @param runid Run Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Run Data </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRasRunLogCall(String runid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ras/runs/{runid}/runlog"
            .replaceAll("\\{" + "runid" + "\\}", localVarApiClient.escapeString(runid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRasRunLogValidateBeforeCall(String runid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'runid' is set
        if (runid == null) {
            throw new ApiException("Missing the required parameter 'runid' when calling getRasRunLog(Async)");
        }
        

        okhttp3.Call localVarCall = getRasRunLogCall(runid, _callback);
        return localVarCall;

    }

    /**
     * Get Run Log
     * 
     * @param runid Run Id (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Run Data </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public String getRasRunLog(String runid) throws ApiException {
        ApiResponse<String> localVarResp = getRasRunLogWithHttpInfo(runid);
        return localVarResp.getData();
    }

    /**
     * Get Run Log
     * 
     * @param runid Run Id (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Run Data </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getRasRunLogWithHttpInfo(String runid) throws ApiException {
        okhttp3.Call localVarCall = getRasRunLogValidateBeforeCall(runid, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Run Log (asynchronously)
     * 
     * @param runid Run Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Run Data </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRasRunLogAsync(String runid, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRasRunLogValidateBeforeCall(runid, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRasSearchRuns
     * @param sort Sorts the returned runs based on the sort field.  Supports sorting fields &#39;to&#39;,&#39;result&#39; and &#39;testclass&#39;.  Use &#39;{FIELD-NAME}:asc&#39; to sort in ascending order. Use &#39;{FIELD-NAME}:desc&#39; to sort in descending order.  You can use multiple instances of this query parameter, or specify multiple sort orders using one query parameter, and a comma-separated  list of sort orders.  (required)
     * @param result Result Status for the run. Commonly queried values: &#39;EnvFail&#39;,&#39;Passed&#39;,&#39;Failed&#39;  (optional)
     * @param bundle The name of the OSGi bundle that the desired test run(s) were loaded with.  (optional)
     * @param requestor Name of the test requestor / submitter (optional)
     * @param from Retrieve runs that started at a time after this date and time.  The only scenario in which from can be omitted is when a runname has been supplied  (optional)
     * @param to Retrieve runs that ended at a date and time prior to this date and time value. If you specify this parameter, only test runs which have completed will be returned.  Tests currently in-flight will not be visible.  (optional)
     * @param testname The full test name (package + short test name) (optional)
     * @param page Causes a specific page in the available results to be returned.  The first page is page 1. If omitted, then page 1 is returned.  (optional)
     * @param size The number of test results returned within each page. If omitted, the default value is 100.  (optional)
     * @param runId The ID for a specific test run as seen by the RAS.  This number is unique across the system, so using this field you can expect one or zero test runs in the first page.  (optional)
     * @param runname The name of the test run for which details will be returned. It will normally be unique, but this is not guaranteed, so you may see multiple results for the same runname under some rare circumstances.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Run Objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRasSearchRunsCall(String sort, String result, String bundle, String requestor, OffsetDateTime from, OffsetDateTime to, String testname, Integer page, Integer size, String runId, String runname, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ras/runs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (result != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("result", result));
        }

        if (bundle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bundle", bundle));
        }

        if (requestor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("requestor", requestor));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (testname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("testname", testname));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (runId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("runId", runId));
        }

        if (runname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("runname", runname));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRasSearchRunsValidateBeforeCall(String sort, String result, String bundle, String requestor, OffsetDateTime from, OffsetDateTime to, String testname, Integer page, Integer size, String runId, String runname, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sort' is set
        if (sort == null) {
            throw new ApiException("Missing the required parameter 'sort' when calling getRasSearchRuns(Async)");
        }
        

        okhttp3.Call localVarCall = getRasSearchRunsCall(sort, result, bundle, requestor, from, to, testname, page, size, runId, runname, _callback);
        return localVarCall;

    }

    /**
     * Get Runs from Query
     * API endpoint to query the Result Archive Store (RAS) for a (possibly sorted)  list of runs based on the given search criteria.  The results returned are paginated, in that the number of desired records per page can be  set, and if there are more test run records to retrieve, requests can be made for  successive pages of results using the same query parameters, but varying the &#39;page&#39; value.  Note: When querying multiple pages of results, tests may complete, or be started between  successive calls to this endpoint. When the &#39;to&#39; field is not used, no timeframe  limit is specified in the query, so results retrieved in later pages may contain  test runs which were already retrieved in previous pages of the same query critera.  Invalid query parameters are ignored. For example: a &#39;cache-buster&#39; parameter. 
     * @param sort Sorts the returned runs based on the sort field.  Supports sorting fields &#39;to&#39;,&#39;result&#39; and &#39;testclass&#39;.  Use &#39;{FIELD-NAME}:asc&#39; to sort in ascending order. Use &#39;{FIELD-NAME}:desc&#39; to sort in descending order.  You can use multiple instances of this query parameter, or specify multiple sort orders using one query parameter, and a comma-separated  list of sort orders.  (required)
     * @param result Result Status for the run. Commonly queried values: &#39;EnvFail&#39;,&#39;Passed&#39;,&#39;Failed&#39;  (optional)
     * @param bundle The name of the OSGi bundle that the desired test run(s) were loaded with.  (optional)
     * @param requestor Name of the test requestor / submitter (optional)
     * @param from Retrieve runs that started at a time after this date and time.  The only scenario in which from can be omitted is when a runname has been supplied  (optional)
     * @param to Retrieve runs that ended at a date and time prior to this date and time value. If you specify this parameter, only test runs which have completed will be returned.  Tests currently in-flight will not be visible.  (optional)
     * @param testname The full test name (package + short test name) (optional)
     * @param page Causes a specific page in the available results to be returned.  The first page is page 1. If omitted, then page 1 is returned.  (optional)
     * @param size The number of test results returned within each page. If omitted, the default value is 100.  (optional)
     * @param runId The ID for a specific test run as seen by the RAS.  This number is unique across the system, so using this field you can expect one or zero test runs in the first page.  (optional)
     * @param runname The name of the test run for which details will be returned. It will normally be unique, but this is not guaranteed, so you may see multiple results for the same runname under some rare circumstances.  (optional)
     * @return RunResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Run Objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server </td><td>  -  </td></tr>
     </table>
     */
    public RunResults getRasSearchRuns(String sort, String result, String bundle, String requestor, OffsetDateTime from, OffsetDateTime to, String testname, Integer page, Integer size, String runId, String runname) throws ApiException {
        ApiResponse<RunResults> localVarResp = getRasSearchRunsWithHttpInfo(sort, result, bundle, requestor, from, to, testname, page, size, runId, runname);
        return localVarResp.getData();
    }

    /**
     * Get Runs from Query
     * API endpoint to query the Result Archive Store (RAS) for a (possibly sorted)  list of runs based on the given search criteria.  The results returned are paginated, in that the number of desired records per page can be  set, and if there are more test run records to retrieve, requests can be made for  successive pages of results using the same query parameters, but varying the &#39;page&#39; value.  Note: When querying multiple pages of results, tests may complete, or be started between  successive calls to this endpoint. When the &#39;to&#39; field is not used, no timeframe  limit is specified in the query, so results retrieved in later pages may contain  test runs which were already retrieved in previous pages of the same query critera.  Invalid query parameters are ignored. For example: a &#39;cache-buster&#39; parameter. 
     * @param sort Sorts the returned runs based on the sort field.  Supports sorting fields &#39;to&#39;,&#39;result&#39; and &#39;testclass&#39;.  Use &#39;{FIELD-NAME}:asc&#39; to sort in ascending order. Use &#39;{FIELD-NAME}:desc&#39; to sort in descending order.  You can use multiple instances of this query parameter, or specify multiple sort orders using one query parameter, and a comma-separated  list of sort orders.  (required)
     * @param result Result Status for the run. Commonly queried values: &#39;EnvFail&#39;,&#39;Passed&#39;,&#39;Failed&#39;  (optional)
     * @param bundle The name of the OSGi bundle that the desired test run(s) were loaded with.  (optional)
     * @param requestor Name of the test requestor / submitter (optional)
     * @param from Retrieve runs that started at a time after this date and time.  The only scenario in which from can be omitted is when a runname has been supplied  (optional)
     * @param to Retrieve runs that ended at a date and time prior to this date and time value. If you specify this parameter, only test runs which have completed will be returned.  Tests currently in-flight will not be visible.  (optional)
     * @param testname The full test name (package + short test name) (optional)
     * @param page Causes a specific page in the available results to be returned.  The first page is page 1. If omitted, then page 1 is returned.  (optional)
     * @param size The number of test results returned within each page. If omitted, the default value is 100.  (optional)
     * @param runId The ID for a specific test run as seen by the RAS.  This number is unique across the system, so using this field you can expect one or zero test runs in the first page.  (optional)
     * @param runname The name of the test run for which details will be returned. It will normally be unique, but this is not guaranteed, so you may see multiple results for the same runname under some rare circumstances.  (optional)
     * @return ApiResponse&lt;RunResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Run Objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RunResults> getRasSearchRunsWithHttpInfo(String sort, String result, String bundle, String requestor, OffsetDateTime from, OffsetDateTime to, String testname, Integer page, Integer size, String runId, String runname) throws ApiException {
        okhttp3.Call localVarCall = getRasSearchRunsValidateBeforeCall(sort, result, bundle, requestor, from, to, testname, page, size, runId, runname, null);
        Type localVarReturnType = new TypeToken<RunResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Runs from Query (asynchronously)
     * API endpoint to query the Result Archive Store (RAS) for a (possibly sorted)  list of runs based on the given search criteria.  The results returned are paginated, in that the number of desired records per page can be  set, and if there are more test run records to retrieve, requests can be made for  successive pages of results using the same query parameters, but varying the &#39;page&#39; value.  Note: When querying multiple pages of results, tests may complete, or be started between  successive calls to this endpoint. When the &#39;to&#39; field is not used, no timeframe  limit is specified in the query, so results retrieved in later pages may contain  test runs which were already retrieved in previous pages of the same query critera.  Invalid query parameters are ignored. For example: a &#39;cache-buster&#39; parameter. 
     * @param sort Sorts the returned runs based on the sort field.  Supports sorting fields &#39;to&#39;,&#39;result&#39; and &#39;testclass&#39;.  Use &#39;{FIELD-NAME}:asc&#39; to sort in ascending order. Use &#39;{FIELD-NAME}:desc&#39; to sort in descending order.  You can use multiple instances of this query parameter, or specify multiple sort orders using one query parameter, and a comma-separated  list of sort orders.  (required)
     * @param result Result Status for the run. Commonly queried values: &#39;EnvFail&#39;,&#39;Passed&#39;,&#39;Failed&#39;  (optional)
     * @param bundle The name of the OSGi bundle that the desired test run(s) were loaded with.  (optional)
     * @param requestor Name of the test requestor / submitter (optional)
     * @param from Retrieve runs that started at a time after this date and time.  The only scenario in which from can be omitted is when a runname has been supplied  (optional)
     * @param to Retrieve runs that ended at a date and time prior to this date and time value. If you specify this parameter, only test runs which have completed will be returned.  Tests currently in-flight will not be visible.  (optional)
     * @param testname The full test name (package + short test name) (optional)
     * @param page Causes a specific page in the available results to be returned.  The first page is page 1. If omitted, then page 1 is returned.  (optional)
     * @param size The number of test results returned within each page. If omitted, the default value is 100.  (optional)
     * @param runId The ID for a specific test run as seen by the RAS.  This number is unique across the system, so using this field you can expect one or zero test runs in the first page.  (optional)
     * @param runname The name of the test run for which details will be returned. It will normally be unique, but this is not guaranteed, so you may see multiple results for the same runname under some rare circumstances.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Run Objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRasSearchRunsAsync(String sort, String result, String bundle, String requestor, OffsetDateTime from, OffsetDateTime to, String testname, Integer page, Integer size, String runId, String runname, final ApiCallback<RunResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRasSearchRunsValidateBeforeCall(sort, result, bundle, requestor, from, to, testname, page, size, runId, runname, _callback);
        Type localVarReturnType = new TypeToken<RunResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRasTestclasses
     * @param sort Provide Sorting (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TestClasses </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRasTestclassesCall(String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ras/testclasses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRasTestclassesValidateBeforeCall(String sort, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getRasTestclassesCall(sort, _callback);
        return localVarCall;

    }

    /**
     * Get all the known test classes
     * 
     * @param sort Provide Sorting (optional)
     * @return TestClasses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TestClasses </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public TestClasses getRasTestclasses(String sort) throws ApiException {
        ApiResponse<TestClasses> localVarResp = getRasTestclassesWithHttpInfo(sort);
        return localVarResp.getData();
    }

    /**
     * Get all the known test classes
     * 
     * @param sort Provide Sorting (optional)
     * @return ApiResponse&lt;TestClasses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TestClasses </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TestClasses> getRasTestclassesWithHttpInfo(String sort) throws ApiException {
        okhttp3.Call localVarCall = getRasTestclassesValidateBeforeCall(sort, null);
        Type localVarReturnType = new TypeToken<TestClasses>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the known test classes (asynchronously)
     * 
     * @param sort Provide Sorting (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TestClasses </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRasTestclassesAsync(String sort, final ApiCallback<TestClasses> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRasTestclassesValidateBeforeCall(sort, _callback);
        Type localVarReturnType = new TypeToken<TestClasses>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
