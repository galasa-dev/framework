/*
 * Galasa Ecosystem API
 * The Galasa Ecosystem REST API allows you to interact with a Galasa Ecosystem.
 *
 * The version of the OpenAPI document: 0.28.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.TestMethod;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TestStructure
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-23T09:56:25.063401+01:00[Europe/London]")
public class TestStructure {
  public static final String SERIALIZED_NAME_RUN_NAME = "runName";
  @SerializedName(SERIALIZED_NAME_RUN_NAME)
  private String runName;

  public static final String SERIALIZED_NAME_BUNDLE = "bundle";
  @SerializedName(SERIALIZED_NAME_BUNDLE)
  private String bundle;

  public static final String SERIALIZED_NAME_TEST_NAME = "testName";
  @SerializedName(SERIALIZED_NAME_TEST_NAME)
  private String testName;

  public static final String SERIALIZED_NAME_TEST_SHORT_NAME = "testShortName";
  @SerializedName(SERIALIZED_NAME_TEST_SHORT_NAME)
  private String testShortName;

  public static final String SERIALIZED_NAME_REQUESTOR = "requestor";
  @SerializedName(SERIALIZED_NAME_REQUESTOR)
  private String requestor;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private String result;

  public static final String SERIALIZED_NAME_QUEUED = "queued";
  @SerializedName(SERIALIZED_NAME_QUEUED)
  private String queued;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  public static final String SERIALIZED_NAME_METHODS = "methods";
  @SerializedName(SERIALIZED_NAME_METHODS)
  private List<TestMethod> methods = null;

  public TestStructure() {
  }

  public TestStructure runName(String runName) {
    
    this.runName = runName;
    return this;
  }

   /**
   * Get runName
   * @return runName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRunName() {
    return runName;
  }


  public void setRunName(String runName) {
    this.runName = runName;
  }


  public TestStructure bundle(String bundle) {
    
    this.bundle = bundle;
    return this;
  }

   /**
   * Get bundle
   * @return bundle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBundle() {
    return bundle;
  }


  public void setBundle(String bundle) {
    this.bundle = bundle;
  }


  public TestStructure testName(String testName) {
    
    this.testName = testName;
    return this;
  }

   /**
   * Get testName
   * @return testName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTestName() {
    return testName;
  }


  public void setTestName(String testName) {
    this.testName = testName;
  }


  public TestStructure testShortName(String testShortName) {
    
    this.testShortName = testShortName;
    return this;
  }

   /**
   * Get testShortName
   * @return testShortName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTestShortName() {
    return testShortName;
  }


  public void setTestShortName(String testShortName) {
    this.testShortName = testShortName;
  }


  public TestStructure requestor(String requestor) {
    
    this.requestor = requestor;
    return this;
  }

   /**
   * Get requestor
   * @return requestor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRequestor() {
    return requestor;
  }


  public void setRequestor(String requestor) {
    this.requestor = requestor;
  }


  public TestStructure status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public TestStructure result(String result) {
    
    this.result = result;
    return this;
  }

   /**
   * Get result
   * @return result
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getResult() {
    return result;
  }


  public void setResult(String result) {
    this.result = result;
  }


  public TestStructure queued(String queued) {
    
    this.queued = queued;
    return this;
  }

   /**
   * Get queued
   * @return queued
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getQueued() {
    return queued;
  }


  public void setQueued(String queued) {
    this.queued = queued;
  }


  public TestStructure startTime(String startTime) {
    
    this.startTime = startTime;
    return this;
  }

   /**
   * Get startTime
   * @return startTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStartTime() {
    return startTime;
  }


  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }


  public TestStructure endTime(String endTime) {
    
    this.endTime = endTime;
    return this;
  }

   /**
   * Get endTime
   * @return endTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEndTime() {
    return endTime;
  }


  public void setEndTime(String endTime) {
    this.endTime = endTime;
  }


  public TestStructure methods(List<TestMethod> methods) {
    
    this.methods = methods;
    return this;
  }

  public TestStructure addMethodsItem(TestMethod methodsItem) {
    if (this.methods == null) {
      this.methods = new ArrayList<>();
    }
    this.methods.add(methodsItem);
    return this;
  }

   /**
   * Get methods
   * @return methods
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<TestMethod> getMethods() {
    return methods;
  }


  public void setMethods(List<TestMethod> methods) {
    this.methods = methods;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestStructure testStructure = (TestStructure) o;
    return Objects.equals(this.runName, testStructure.runName) &&
        Objects.equals(this.bundle, testStructure.bundle) &&
        Objects.equals(this.testName, testStructure.testName) &&
        Objects.equals(this.testShortName, testStructure.testShortName) &&
        Objects.equals(this.requestor, testStructure.requestor) &&
        Objects.equals(this.status, testStructure.status) &&
        Objects.equals(this.result, testStructure.result) &&
        Objects.equals(this.queued, testStructure.queued) &&
        Objects.equals(this.startTime, testStructure.startTime) &&
        Objects.equals(this.endTime, testStructure.endTime) &&
        Objects.equals(this.methods, testStructure.methods);
  }

  @Override
  public int hashCode() {
    return Objects.hash(runName, bundle, testName, testShortName, requestor, status, result, queued, startTime, endTime, methods);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestStructure {\n");
    sb.append("    runName: ").append(toIndentedString(runName)).append("\n");
    sb.append("    bundle: ").append(toIndentedString(bundle)).append("\n");
    sb.append("    testName: ").append(toIndentedString(testName)).append("\n");
    sb.append("    testShortName: ").append(toIndentedString(testShortName)).append("\n");
    sb.append("    requestor: ").append(toIndentedString(requestor)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    queued: ").append(toIndentedString(queued)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    methods: ").append(toIndentedString(methods)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("runName");
    openapiFields.add("bundle");
    openapiFields.add("testName");
    openapiFields.add("testShortName");
    openapiFields.add("requestor");
    openapiFields.add("status");
    openapiFields.add("result");
    openapiFields.add("queued");
    openapiFields.add("startTime");
    openapiFields.add("endTime");
    openapiFields.add("methods");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TestStructure
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (TestStructure.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestStructure is not found in the empty JSON string", TestStructure.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TestStructure.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestStructure` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("runName") != null && !jsonObj.get("runName").isJsonNull()) && !jsonObj.get("runName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runName").toString()));
      }
      if ((jsonObj.get("bundle") != null && !jsonObj.get("bundle").isJsonNull()) && !jsonObj.get("bundle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bundle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bundle").toString()));
      }
      if ((jsonObj.get("testName") != null && !jsonObj.get("testName").isJsonNull()) && !jsonObj.get("testName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `testName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("testName").toString()));
      }
      if ((jsonObj.get("testShortName") != null && !jsonObj.get("testShortName").isJsonNull()) && !jsonObj.get("testShortName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `testShortName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("testShortName").toString()));
      }
      if ((jsonObj.get("requestor") != null && !jsonObj.get("requestor").isJsonNull()) && !jsonObj.get("requestor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestor").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) && !jsonObj.get("result").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `result` to be a primitive type in the JSON string but got `%s`", jsonObj.get("result").toString()));
      }
      if ((jsonObj.get("queued") != null && !jsonObj.get("queued").isJsonNull()) && !jsonObj.get("queued").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `queued` to be a primitive type in the JSON string but got `%s`", jsonObj.get("queued").toString()));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
      if ((jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) && !jsonObj.get("endTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTime").toString()));
      }
      if (jsonObj.get("methods") != null && !jsonObj.get("methods").isJsonNull()) {
        JsonArray jsonArraymethods = jsonObj.getAsJsonArray("methods");
        if (jsonArraymethods != null) {
          // ensure the json data is an array
          if (!jsonObj.get("methods").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `methods` to be an array in the JSON string but got `%s`", jsonObj.get("methods").toString()));
          }

          // validate the optional field `methods` (array)
          for (int i = 0; i < jsonArraymethods.size(); i++) {
            TestMethod.validateJsonObject(jsonArraymethods.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestStructure.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestStructure' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestStructure> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestStructure.class));

       return (TypeAdapter<T>) new TypeAdapter<TestStructure>() {
           @Override
           public void write(JsonWriter out, TestStructure value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestStructure read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TestStructure given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TestStructure
  * @throws IOException if the JSON string is invalid with respect to TestStructure
  */
  public static TestStructure fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestStructure.class);
  }

 /**
  * Convert an instance of TestStructure to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

